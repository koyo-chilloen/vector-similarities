import numpy as np

def euclidean_normalized(a, b):
    """
    정규화된 유클리드 거리 (0~1)
    """
    a, b = np.asarray(a), np.asarray(b)
    d = a.size                          # 차원 수
    dist = np.linalg.norm(a - b)        # √Σ(x_i - y_i)^2
    return dist / np.sqrt(d)            # √d 로 나눠서 0~1 스케일

def manhattan_normalized(a, b):
    """
    정규화된 맨해튼 거리 (0~1)
    """
    a, b = np.asarray(a), np.asarray(b)
    d = a.size
    dist = np.abs(a - b).sum()          # Σ|x_i - y_i|
    return dist / d                     # d 로 나눠서 0~1 스케일

def cosine_similarity(a, b):
    """
    코사인 유사도 (-1~1)
    """
    a, b = np.asarray(a), np.asarray(b)
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))

def similarity_from_distance(d_norm):
    """
    0~1 정규화 거리 → 0~1 유사도
    """
    return 1.0 - d_norm


def display_similarities(a, b):
    print("코사인 유사도       :", cosine_similarity(a,b))
    print("내적 : ", np.dot(a, b))
    print("정규화 유클리드 유사도 :", similarity_from_distance(euclidean_normalized(a, b)))
    print("정규화 맨해튼 유사도  :", similarity_from_distance(manhattan_normalized(a, b)))
    

if __name__ == "__main__":
    A = (0.002, 0.003, 0.003, 0.001, 0, 0.001, 0.002, 0, 0.001, 0.011, 0.006, 0.007, 0.003, 0.008, 0.002, 0.003, 0.002, 0.032, 0, 0.005, 0, 0, 0.001, 0.001, 0.005, 0.004, 0, 0.168, 0.097, 0.26, 0.077, 0.274, 0.267, 0.062, 0.213, 0.623, 0.055, 0.746, 0.061, 0.457, 0.319, 0.525, 0.238, 0.615, 0.327, 0.489, 0.066, 0.206, 0.059, 0.295, 0.058, 0.018, 0.034, 0.105, 0.023, 0.1, 0.059, 0.173, 0.112, 0.103, 0.016, 0.053, 0.026, 0.011, 0.001, 0.002, 0.001, 0.009, 0.014, 0.002, 0.004, 0.003, 0.001, 0, 0.001, 0, 0.001, 0, 0.001, 0.011, 0.011, 0.011, 0.012, 0.01, 0.011, 0.005, 0.024, 0.006, 0.014, 0.006, 0.004, 0.05, 0.002, 0.014, 0.024, 0, 0.009, 0.011, 0, 0.001, 0.002, 0.006, 0.003, 0.003, 0.002, 0.001, 0.188, 0.057, 0.115, 0.574, 0.088, 0.408, 0.497, 0.072, 0.057, 0.054, 0.041, 0.072, 0.101, 0.577, 0.237, 0.329, 0.005, 0.026, 0.016, 0.054, 0.036, 0.276, 0.426, 0.013, 0.016, 0.091)
    B = (0.077, 0.02, 0.03, 0.068, 0.158, 0.091, 0.055, 0.102, 0.037, 0.054, 0.24, 0.191, 0.066, 0.075, 0.024, 0.034, 0.126, 0.077, 0.608, 0.389, 0.28, 0.206, 0.582, 0.453, 0.146, 0.416, 0.549, 0.019, 0.014, 0.012, 0.019, 0.028, 0.027, 0.253, 0.036, 0.081, 0.029, 0.021, 0.19, 0.022, 0.036, 0.024, 0.012, 0.009, 0.031, 0.045, 0.16, 0.173, 0.003, 0.009, 0.007, 0.008, 0.004, 0.01, 0.006, 0.002, 0.002, 0.005, 0.005, 0.002, 0.009, 0.002, 0.023, 0.006, 0.008, 0.033, 0.09, 0.01, 0.009, 0.013, 0.013, 0.016, 0.062, 0.033, 0.124, 0.03, 0.211, 0.13, 0.023, 0.027, 0.551, 0.025, 0.046, 0.023, 0.143, 0.02, 0.012, 0.019, 0.011, 0.02, 0.113, 0.436, 0.145, 0.611, 0.698, 0.169, 0.483, 0.377, 0.09, 0.023, 0.695, 0.025, 0.441, 0.704, 0.133, 0.226, 0.005, 0.005, 0.009, 0.006, 0.006, 0.004, 0.008, 0.006, 0.013, 0.016, 0.008, 0.006, 0.002, 0.004, 0.005, 0.007, 0.163, 0.022, 0.11, 0.061, 0.222, 0.057, 0.047, 0.054, 0.129, 0.103)
    see = 1
    if see == 1:
        display_similarities(A, B)
    else:
        """
        정규화된 유클리드 거리 (0~1)
        """
        A, B = np.asarray(A), np.asarray(B)
        d = A.size                          # 차원 수
        dist = np.linalg.norm(A - B)        # √Σ(x_i - y_i)^2
        print(dist)
        print(dist / np.sqrt(d))            # √d 로 나눠서 0~1 스케일
        print(similarity_from_distance(dist / np.sqrt(d))) 
        print(1 / (dist + 1))